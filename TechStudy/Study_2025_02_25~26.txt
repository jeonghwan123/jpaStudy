
데이터 중심 설계의 문제점

현재방식은 객체 설계를 테이블 설계에 맞춘 방식
테이블의 외래키를 객체에 그대로 가져옴 -> 참조가 아닌 그대로 가져온다는 의미 = 참조가 없기띠문에 UML도 잘못됨
객체 그래프 탐색이 불가능함

연관관계 매핑 기초

방향 - 단방향, 양방향
다중성 - 다대일, 일대다, 일대일, 다대다
연관관계의 주인 - 객체 양방향 연관관계는 관리가 필요함


Team team = new Team();
team.setName("Team A");
em.persist(team);

Member member = new Member();
member.setUsername("Member1");
member.setTeamId(team.getId());
em.persist(member);

Member findMember = em.find(Member.class, member.getId());
Long findTeamId = findMember.getTeamId();
Team findTeam = em.find(Team.class, findTeamId);
 이런식으로 데이터 중심으로 모델링하면, 객체간의 관계가 불명확해지며, 추가적인 조회가 필요하게되어 성능저하가 발생할 가능성이 높음  이런 여러 단점을 극복하기위해 객체 지향 모델링에 대해 알아봄

@ManyToOne
@JoinColumn(name = "TEAM_ID")
private Team team;
 이런식으로 어노테이션을 통해서 매핑을 해줄수있음  Team team = new Team();
team.setName("Team A");
em.persist(team);

Member member = new Member();
member.setUsername("Member1");
member.setTeam(team);
em.persist(member);

em.flush();
em.clear();

Member findMember = em.find(Member.class, member.getId());
Team findTeam = findMember.getTeam();
System.out.println(findTeam.getName());
 앞과는 다르게 Team findTeam으로 조회가능

양방향 매핑

참조를 넣어둬야 함 - 외래키 한개만으로 양쪽에서 서로의 정보를 얻어올수있음. 하지만 객체 연관관계에서 보면 Team에 list member를 넣어줘야 양방향으로 가능

객체는 단방향이 유리함

@OneToMany(mappedBy = "team") // member에서 team이라는 변수명과 연관됨을 의미
private List<Member> members = new ArrayList<>();

mappedBy - 객체와 테이블간에 연관관계를 맺는 차이를 이해할 필요가있음

객체에서 양방향 연관관계는 하나로 볼것이 아니라 단방향 연관관계가 2개인점을 인지해야함 -> 이걸 억지로 양방향이라고 말함
각 객체마다 상대의 참조값이 필요함 = 서로 다른 방향의 단방향 2개라고 생각하면 편함. 즉, 객체를 양방향으로 참조하려면 단방향 연관관계 2개를 만들어야함

테이블에서는 외래키와 외래키가 pk가되는 테이블 사이의 관계를 생각했을때 양쪽에서 둘다 같은 컬럼을 통해서 각자의 정보를 받아올수있음
테이블에서는 외래키 한개로 두테이블의 연관관계를 정리할수있음

이런 차이때문에 양방향 매핑에서 연관관계의 주인을 설정함
객체의 두 관계중 하나를 연관관계의 주인으로 설정
주인만이 외래키를 관리(등록 및 수정)
주인이 아닌쪽은 읽기만
주인은 mappedBy로 속성 사용 불가, 주인이 아닌쪽만 mappedBy 속성으로 주인을 지정함

외래 키가 있는 곳을 주인으로 지정하는것이 편함 -> db입장에서 외래키가 있는곳이 n:1 임 n쪽이 manytoOne의 어노테이션을 사용하기때문에 편함

jpa 상으로는 주인쪽에서  Team team = new Team();
team.setName("Team1");
em.persist(team);

Member member = new Member();
member.setUsername("Member1");
member.setTeam(team);
em.persist(member);

team.getMembers().add(member);     // 여기까지는 1차캐시에 저장

em.flush();
em.clear();

Team findTeam = em.find(Team.class, team.getId());
List<Member> members = findTeam.getMembers();
for (Member m : members) {
    System.out.println(m.getUsername());
}
 이런식으로 setTeam만 해줘도 멤버가 조회가 되지만 문제가 존재함
Flush, clear 를 하지않으면 멤버가 생성되기만했지 안에 들어간 값이 없어서 불러올수없음
그래서 양쪽에 값을 넣어주는게 맞음 -> team.getMembers().add(member);

연관관계 편의 메소드를 생성하는게 편리함

public void setTeam(Team team) {
    this.team = team;
    team.getMembers().add(this);
}

 이런식으로 설정하는게 편리함

메소드 생성시에는 set , get 과 같은 관례적인 함수명대신 알아보기쉽게 이름 변경하는것도 추천
둘중에 한곳에서만 메소드 설정헤야함 -> 어디에서 넣어도 상관없음 상황마다 어디에 넣는게 편리한지 파악해야함

양방향 매핑시에 무한루프 조심해야함
Controller에서 엔티티는 반환하면 안됨 - 무한루프 발생 , 엔티티로 변경가능하지만 엔티티를 바꾸는 순간 모든 값이 바뀔수있음


24일날 연습 문제 풀어볼려고 새로운 db url 설정하는데 너무 오래걸렸지만 해결하면서 내일부턴 세웠던 계획에 차질없이 진행할수있을것 같다...