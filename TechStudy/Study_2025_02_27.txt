연관관계 매핑

다중성 - 다대일 - @ManyToOne              일대다 - @OneToMany
	     일대일 - @OneToOne
	     다대다 - @ManyToMany (많이 사용하지않음) 
테이블 - 외래키 한개로 양쪽 조인 가능, 방향이라는 개념 존재하지않음

객체 - 참조용 필드가 있는쪽으로만 참조 가능, 한쪽만 참조하면 단방향, 양쪽이 서로 참조하면 양방향

다대일 구조 - 다대일 구조에선 다 인 쪽에서 외래키를 관리함
일대다 구조 - 불필요한 테이블 업데이트가 발생함. 객체와 테이블의 차이때문에 반대편 테이블의 외래키를 관리하는 특이한 구조 . 자주 사용하지않음
		     쓸거면 @joinColumn 반드시 사용해줘야함 아니면 조인 테이블 방식을 이용해 중간에 테이블이 한개더 생성되면서 성능상 저하됨
		     엔티티가 관리하는 외래키가 다른 테이블에 있음. 연관관계 관리를 위해 추가로 update sql 실행이 강제됨

일대일 구조 - 주 테이블나 대상 테이블 중에 외래키 선택 가능함
		     외래 키에 데이터베이스 유니크 제약조건 추가
		     다대일과 유사하게 외래키가 있는 곳이 연관관계 주인, 반대편도 당연하게 mappedby 적용시켜줘야함

다대다 구조는 실전에서 사용하지않고, 중간테이블을 이용하여 1:N,N:1 사용하는것 추천

관계형 데이터베이스에는 상속 관계가 존재하지 않음 대신 슈퍼타입 서브타입 관계라는 모델링 기법이 객체 상속과 유사


상속관계 매핑 - 객체의 상속 구조와 db의 슈퍼타입, 서브타입 관계를 매핑

슈퍼, 서브 타입 논리모델을 실제 물리 모델로 구현하는 방법
	1. 각각 테이블로 변환 - 조인 전략(기본으로 가져가야 할 방식임)
					   @Inheritance(strategy = InheritanceType.JOINED) 사용해서 각각의 테이블 생성해줌
					   @DiscriminatorColumn 사용해서 타입관련 컬럼생성가능
					   데이터가 정규화 됨, 외래키 참조 무결성 제약조건 활용가능, 저장공간 효율화
					   조회시 조인을 많이 사용하고, 조회 쿼리가 복잡하다는 단점이 존재함
	2. 통합 테이블로 변환 - 단일 테이블 전략
					    @Inheritance(strategy = InheritanceType.SINGLE_TABLE) 사용해서 하나의 테이블로 설정가능
					    @DiscriminatorColumn 없어도 필수적으로 DTYPE 생성됨
					    조인이 필요없음,조회 쿼리가 단순하다는 장점이 존재함
					    자식 엔티티가 매핑한 컬럼은 모두 null허용 -> 데이터 무결성 조건에서봤을땐 별로인 부분
					    단일 테이블에 모든 것을 저장하므로 테이블이 커져 상황에 따라서 조회성능이 느려질 가능성이 어느정도 존재함
	3. 서브타입 테이블로 변환 - 구현 클래스마다 테이블 전략
						   @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS) 사용해서 적용가능
						   find할때 모든 테이블에서 찾아봐야하기 때문에 매우 비효율적임
						   여러 자식 테이블을 함께 조회해야하기때문에 비효율적, 자식 테이블을 통합해서 쿼리하기 어려움

어노테이션에서 joined,single_table 이렇게 전략만 바꿔도 문제없이 작동함


@MappedSuperClass
	공통 매핑 정보가 필요할때 사용 - 객체에서만 해당됨
	모아놓은 속성에 해당 하는 클래스에 @MappedSuperclass 적어주면 됨 속성이 필요한 곳에는 extends 사용
	@Column 으로 컬럼 이름 변경 가능
	상속관계 매핑 x,  엔티티 x, 테이블과 매핑 x , 조회, 검색 불가능
	부모 클래스를 상속받는 자식 클래스에 매핑정보만 제공
	추상클래스로 권장 -> 직접 사용하는것이 아니기때문

